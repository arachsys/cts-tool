#!/bin/python

import base64
import hashlib
import os
import sys
import urllib.error
import urllib.request
from datetime import datetime
from xml.etree import ElementTree as ET

config = {
  'url': 'https://webservice.secure.ddts.defra.gov.uk/'
           + 'DefraDataTransferPublicNWSE.asmx',
  'ddts': { 'username': 'DDTS.CTWS.xxxxxxxx', 'password': 'xxxxxxxx' },
  'ctws': { 'username': 'nnn-nnn-nnn', 'password': 'xxxxxxxx' },
  'holding': 'cc/ppp/hhhh', 'site': ''
}

ns = {
  'envelope': 'http://schemas.xmlsoap.org/soap/envelope/',
  'defra': 'http://www.defra.gov.uk',
  'request': 'http://defra.bcms.ctws/holding_request',
  'results': 'http://defra.bcms.ctws/holding_request_results'
}

def serialise(element):
  element = ET.tostring(element, 'utf-8')
  return b'<?xml version="1.0" encoding="utf-8"?>' + element

request = ET.Element('GetHolding', xmlns = ns['request'],
  SchemaVersion = '1.0', ProgramName = 'cts-tool', ProgramVersion = '1.0',
  RequestTimeStamp = datetime.utcnow().isoformat() + '+00:00')
ET.SubElement(ET.SubElement(request, 'Authentication'), 'CTS_OL_User',
  Usr = config['ctws']['username'], Pwd = config['ctws']['password'])

holding = ET.SubElement(request, 'Holding', Loc = config['holding'])
if config.get('site'):
  holding.attrib['SLoc'] = config['site']
request = base64.b64encode(serialise(request)).decode('ascii')

envelope = ET.Element('Envelope', xmlns = ns['envelope'])
transfer = ET.SubElement(ET.SubElement(envelope, 'Body'),
  'TransferDataHex', xmlns = ns['defra'])
ET.SubElement(transfer, 'username').text = config['ddts']['username']
ET.SubElement(transfer, 'password').text \
  = hashlib.md5(config['ddts']['password'].encode()).hexdigest()
ET.SubElement(transfer, 'serviceName').text = 'DEFRA-CTWS'
ET.SubElement(transfer, 'type').text = 'Get_Cattle_On_Holding-V1-0'
ET.SubElement(transfer, 'data').text = request

try:
  request = urllib.request.Request(config['url'], serialise(envelope), {
    'Content-Type': 'text/xml; charset=utf-8',
    'SOAPAction': 'http://www.defra.gov.uk/TransferDataHex'
  })
  text = urllib.request.urlopen(request).read()
except urllib.error.HTTPError as error:
  sys.stderr.write('HTTP error %s\n' % error.code)
  sys.exit(1)
except urllib.error.URLError as error:
  sys.stderr.write('URL error: %s\n' % error.reason)
  sys.exit(1)

try:
  text = ET.XML(text).find('.//defra:TransferDataHexResult', ns).text
  text = base64.b64decode(text).decode('utf-8')
  tree = ET.XML(text)
except:
  sys.stderr.write('Invalid response: %s\n' % text)
  sys.exit(1)

animals = []
for animal in tree.findall('.//results:Animal', ns):
  animals.append((animal.attrib.get('Etg').replace(' ', ''),
                  animal.attrib.get('Brd', '?').upper(),
                  animal.attrib.get('Sex', '?').upper(),
                  animal.attrib.get('Dob', '?'),
                  animal.attrib.get('OnDate', '?')))

animals.sort(key = lambda a: a[0][-5:])
animals.sort(key = lambda a: a[3])
animals.sort(key = lambda a: a[4])
for animal in animals:
  print(' '.join(animal))
